
Prelaboratorio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009de  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074c  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c3  00000000  00000000  000015aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e7  00000000  00000000  00001f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 30       	cpi	r26, 0x0B	; 11
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  88:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <botones>:
//uint8_t ledsmspc0;
//uint8_t ledsmspc1;
uint8_t ledscont2;
#include "botones.h"
void botones(uint8_t numboton){
	switch(ganador){
  90:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ganador>
  94:	91 30       	cpi	r25, 0x01	; 1
  96:	09 f4       	brne	.+2      	; 0x9a <botones+0xa>
  98:	98 c0       	rjmp	.+304    	; 0x1ca <botones+0x13a>
  9a:	20 f0       	brcs	.+8      	; 0xa4 <botones+0x14>
  9c:	92 30       	cpi	r25, 0x02	; 2
  9e:	09 f4       	brne	.+2      	; 0xa2 <botones+0x12>
  a0:	a0 c0       	rjmp	.+320    	; 0x1e2 <botones+0x152>
  a2:	08 95       	ret
	case 0:
		switch(numboton){
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	19 f0       	breq	.+6      	; 0xae <botones+0x1e>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	19 f1       	breq	.+70     	; 0xf2 <botones+0x62>
  ac:	2c c0       	rjmp	.+88     	; 0x106 <botones+0x76>
		case 1:
			if (contador1 <= 15)
  ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <contador1>
  b2:	90 31       	cpi	r25, 0x10	; 16
  b4:	40 f5       	brcc	.+80     	; 0x106 <botones+0x76>
			{
			contador1++;
  b6:	9f 5f       	subi	r25, 0xFF	; 255
  b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <contador1>
			//Necesito led en PD7, menos significativo, por lo que solo asignaré al puerto D7 el valor menos significativo.
			Ledmspdc1 = contador1 & 0b00000001;
  bc:	91 70       	andi	r25, 0x01	; 1
  be:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <Ledmspdc1>
			PORTD = (Ledmspdc1<<PORTD7);
  c2:	97 95       	ror	r25
  c4:	99 27       	eor	r25, r25
  c6:	97 95       	ror	r25
  c8:	9b b9       	out	0x0b, r25	; 11
			//Necesito led en PB0, segundo menos significativo, por lo que haré un AND para obtener el segundo menos significativo.
			Ledmspb1 = ((contador1 & 0b00000010) >> 1);
  ca:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <contador1>
  ce:	22 70       	andi	r18, 0x02	; 2
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	35 95       	asr	r19
  d4:	27 95       	ror	r18
  d6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <Ledmspb1>
			PORTB = (Ledmspb1<<PORTB0);
  da:	25 b9       	out	0x05, r18	; 5
			prueba = ((contador1 & 0b00001100) >> 2);
  dc:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <contador1>
  e0:	2c 70       	andi	r18, 0x0C	; 12
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	35 95       	asr	r19
  e6:	27 95       	ror	r18
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
  ec:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	0a c0       	rjmp	.+20     	; 0x106 <botones+0x76>
			PORTC = (ledsmspc1<<PORTC1);
			*/
			}
		break;
		case 2:
			if (contador2 <= 15)
  f2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <contador2>
  f6:	90 31       	cpi	r25, 0x10	; 16
  f8:	30 f4       	brcc	.+12     	; 0x106 <botones+0x76>
			{
				contador2++;
  fa:	9f 5f       	subi	r25, 0xFF	; 255
  fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <contador2>
				ledscont2 = ((contador2 & 0b00001111));
 100:	9f 70       	andi	r25, 0x0F	; 15
 102:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ledscont2>
				//Aquí tengo los valores de mi parte de arriba del PORTC.
				//PORTC |= ((ledscont2 & 0b00000001)<<PORTC2)|(((ledscont2 & 0b00000010)>>1)<<PORTC3)|(((ledscont2 & 0b00000100)>>2)<<PORTC4)|(((ledscont2 & 0b00001000)>>3)<<PORTC5);
			}
		break;
		}
		PORTC = ((prueba & 0b00000001)<<PORTC0)|(((prueba & 0b00000010)>>1)<<PORTC1)|((ledscont2 & 0b00000001)<<PORTC2)|(((ledscont2 & 0b00000010)>>1)<<PORTC3)|(((ledscont2 & 0b00000100)>>2)<<PORTC4)|(((ledscont2 & 0b00001000)>>3)<<PORTC5);
 106:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <ledscont2>
 10a:	62 2f       	mov	r22, r18
 10c:	61 70       	andi	r22, 0x01	; 1
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	fb 01       	movw	r30, r22
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	92 2f       	mov	r25, r18
 11c:	92 70       	andi	r25, 0x02	; 2
 11e:	69 2f       	mov	r22, r25
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	75 95       	asr	r23
 124:	67 95       	ror	r22
 126:	66 0f       	add	r22, r22
 128:	77 1f       	adc	r23, r23
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	92 2f       	mov	r25, r18
 134:	94 70       	andi	r25, 0x04	; 4
 136:	49 2f       	mov	r20, r25
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	55 95       	asr	r21
 13c:	47 95       	ror	r20
 13e:	55 95       	asr	r21
 140:	47 95       	ror	r20
 142:	42 95       	swap	r20
 144:	52 95       	swap	r21
 146:	50 7f       	andi	r21, 0xF0	; 240
 148:	54 27       	eor	r21, r20
 14a:	40 7f       	andi	r20, 0xF0	; 240
 14c:	54 27       	eor	r21, r20
 14e:	28 70       	andi	r18, 0x08	; 8
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	35 95       	asr	r19
 154:	27 95       	ror	r18
 156:	35 95       	asr	r19
 158:	27 95       	ror	r18
 15a:	35 95       	asr	r19
 15c:	27 95       	ror	r18
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	22 95       	swap	r18
 164:	32 95       	swap	r19
 166:	30 7f       	andi	r19, 0xF0	; 240
 168:	32 27       	eor	r19, r18
 16a:	20 7f       	andi	r18, 0xF0	; 240
 16c:	32 27       	eor	r19, r18
 16e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	93 70       	andi	r25, 0x03	; 3
 174:	e9 2b       	or	r30, r25
 176:	6e 2b       	or	r22, r30
 178:	46 2b       	or	r20, r22
 17a:	24 2b       	or	r18, r20
 17c:	28 b9       	out	0x08, r18	; 8
		if ((numboton == 1) & (contador1 == 15))
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <contador1>
 184:	9f 30       	cpi	r25, 0x0F	; 15
 186:	09 f0       	breq	.+2      	; 0x18a <botones+0xfa>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	09 f0       	breq	.+2      	; 0x192 <botones+0x102>
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	92 23       	and	r25, r18
 194:	39 f0       	breq	.+14     	; 0x1a4 <botones+0x114>
		{
			//contador2 = 0;
			contador1 = 14;
 196:	8e e0       	ldi	r24, 0x0E	; 14
 198:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <contador1>
			ganador = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ganador>
 1a2:	08 95       	ret
		}
		else if ((numboton == 2) & (contador2 == 15))
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <contador2>
 1aa:	9f 30       	cpi	r25, 0x0F	; 15
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <botones+0x120>
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <botones+0x128>
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	92 23       	and	r25, r18
 1ba:	f1 f0       	breq	.+60     	; 0x1f8 <botones+0x168>
		{
			//contador1 = 0;
			contador2 = 14;
 1bc:	8e e0       	ldi	r24, 0x0E	; 14
 1be:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador2>
			ganador = 2;
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ganador>
 1c8:	08 95       	ret
		}
	break;
	case 1:
		PORTD = 0b1111001;
 1ca:	89 e7       	ldi	r24, 0x79	; 121
 1cc:	8b b9       	out	0x0b, r24	; 11
		PORTC = (0<<PORTC2)|(0<<PORTC3)|(0<<PORTC4)|(0<<PORTC5);
 1ce:	18 b8       	out	0x08, r1	; 8
		PORTC = (1<<PORTC0)|(1<<PORTC1);
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	88 b9       	out	0x08, r24	; 8
		PORTD |= (1<<PORTD7);
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	80 68       	ori	r24, 0x80	; 128
 1d8:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1<<PORTB0);
 1da:	85 b1       	in	r24, 0x05	; 5
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	85 b9       	out	0x05, r24	; 5
		
	break;
 1e0:	08 95       	ret
	case 2:
		PORTD = 0b0100100;
 1e2:	84 e2       	ldi	r24, 0x24	; 36
 1e4:	8b b9       	out	0x0b, r24	; 11
		PORTC = (0<<PORTC0)|(0<<PORTC1);
 1e6:	18 b8       	out	0x08, r1	; 8
		PORTD &= ~(1<<PORTD7);
 1e8:	8b b1       	in	r24, 0x0b	; 11
 1ea:	8f 77       	andi	r24, 0x7F	; 127
 1ec:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1<<PORTB0);
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	8e 7f       	andi	r24, 0xFE	; 254
 1f2:	85 b9       	out	0x05, r24	; 5
		PORTC = (1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5);
 1f4:	8c e3       	ldi	r24, 0x3C	; 60
 1f6:	88 b9       	out	0x08, r24	; 8
 1f8:	08 95       	ret

000001fa <initports>:
//*********************************************************************************************
//Subrutinas
//*********************************************************************************************
void initports(void){
	//Inicializamos los puertos de interés:
	UCSR0B = 0;
 1fa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//Todo el puerto D es salida debido a que todos los leds están alli.
	DDRD = 0xFF;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	8a b9       	out	0x0a, r24	; 10
	//Apago todos los leds del display.
	PORTD = 0xFF;
 202:	8b b9       	out	0x0b, r24	; 11
	//Todo el puerto C como salida, debido a que est+an los leds allí.
	DDRC = 0xFF;
 204:	87 b9       	out	0x07, r24	; 7
	//Apago todos los leds
	PORTC = 0;
 206:	18 b8       	out	0x08, r1	; 8
	//PB0 es salida, lo de más es entrada.
	DDRB = 0;
 208:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1<<PORTB0);
 20a:	84 b1       	in	r24, 0x04	; 4
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	84 b9       	out	0x04, r24	; 4
	//Configurar los botones como downs, pero se conecta con pullup.
	//PORTB |= (1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3);
	PORTB &= ~(1<<PORTC1)|~(1<<PORTC2)|~(1<<PORTC3);
 210:	85 b1       	in	r24, 0x05	; 5
 212:	85 b9       	out	0x05, r24	; 5
	//Vamos a habilitar la interrupción de los puertos B.
	PCICR |= (1<<PCIE0);
 214:	e8 e6       	ldi	r30, 0x68	; 104
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	80 83       	st	Z, r24
	//Habilitamos la máscara.
	PCMSK0 |= (1<<PCINT1)|(1<<PCINT2)|(1<<PCINT3);
 21e:	eb e6       	ldi	r30, 0x6B	; 107
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	8e 60       	ori	r24, 0x0E	; 14
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <main>:
//Código principal
//*********************************************************************************************

int main(void)
{
	initports();
 22a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <initports>
	// Habilitamos las interrupciones globales.
	sei();
 22e:	78 94       	sei
    while (1) 
    {
		//PORTD = 0b00000000;
		if (bandera == 1 && ciclo == 0 )
 230:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <bandera>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x6>
 238:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ciclo>
 23c:	81 11       	cpse	r24, r1
 23e:	f8 cf       	rjmp	.-16     	; 0x230 <main+0x6>
		{
				PORTD = 0b0010010;
 240:	82 e1       	ldi	r24, 0x12	; 18
 242:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	83 ed       	ldi	r24, 0xD3	; 211
 248:	90 e3       	ldi	r25, 0x30	; 48
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x20>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x2a>
 254:	00 00       	nop
				_delay_ms(1000);
				PORTD = 0b0011001;
 256:	89 e1       	ldi	r24, 0x19	; 25
 258:	8b b9       	out	0x0b, r24	; 11
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	83 ed       	ldi	r24, 0xD3	; 211
 25e:	90 e3       	ldi	r25, 0x30	; 48
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x36>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x40>
 26a:	00 00       	nop
				_delay_ms(1000);
				PORTD = 0b0110000;
 26c:	80 e3       	ldi	r24, 0x30	; 48
 26e:	8b b9       	out	0x0b, r24	; 11
 270:	2f ef       	ldi	r18, 0xFF	; 255
 272:	83 ed       	ldi	r24, 0xD3	; 211
 274:	90 e3       	ldi	r25, 0x30	; 48
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x4c>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x56>
 280:	00 00       	nop
				_delay_ms(1000);
				PORTD = 0b0100100;
 282:	84 e2       	ldi	r24, 0x24	; 36
 284:	8b b9       	out	0x0b, r24	; 11
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	83 ed       	ldi	r24, 0xD3	; 211
 28a:	90 e3       	ldi	r25, 0x30	; 48
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x62>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x6c>
 296:	00 00       	nop
				_delay_ms(1000);
				PORTD = 0b1111001;
 298:	89 e7       	ldi	r24, 0x79	; 121
 29a:	8b b9       	out	0x0b, r24	; 11
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	83 ed       	ldi	r24, 0xD3	; 211
 2a0:	90 e3       	ldi	r25, 0x30	; 48
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x78>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x82>
 2ac:	00 00       	nop
				_delay_ms(1000);
				PORTD = 0b1000000;
 2ae:	80 e4       	ldi	r24, 0x40	; 64
 2b0:	8b b9       	out	0x0b, r24	; 11
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	83 ed       	ldi	r24, 0xD3	; 211
 2b6:	90 e3       	ldi	r25, 0x30	; 48
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x8e>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x98>
 2c2:	00 00       	nop
				_delay_ms(1000);
				juego = 1;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <juego>
				ciclo = 1;
 2ca:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ciclo>
 2ce:	b0 cf       	rjmp	.-160    	; 0x230 <main+0x6>

000002d0 <__vector_3>:
	}
//*********************************************************************************************
//ISR
//*********************************************************************************************
//Los botones me están entrando donde no deberían, revisar el código de la garra.
ISR(PCINT0_vect){
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
	if (!(PINB & (1<<PORTB1)))
 2f2:	19 99       	sbic	0x03, 1	; 3
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <__vector_3+0x2c>
	{
		
		//contador++;
		bandera = 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <bandera>
	}
	if (!(PINB & (1<<PORTB2)))
 2fc:	1a 99       	sbic	0x03, 2	; 3
 2fe:	08 c0       	rjmp	.+16     	; 0x310 <__vector_3+0x40>
	{
		if (juego == 1)
 300:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <juego>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	21 f4       	brne	.+8      	; 0x310 <__vector_3+0x40>
		{
		numboton = 1;
 308:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <numboton>
		botones(numboton);
 30c:	0e 94 48 00 	call	0x90	; 0x90 <botones>
		}
	}
	if (!(PINB & (1<<PORTB3)))
 310:	1b 99       	sbic	0x03, 3	; 3
 312:	09 c0       	rjmp	.+18     	; 0x326 <__vector_3+0x56>
	{
		if (juego == 1)
 314:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <juego>
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	29 f4       	brne	.+10     	; 0x326 <__vector_3+0x56>
		{
			numboton = 2;
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <numboton>
			botones(numboton);
 322:	0e 94 48 00 	call	0x90	; 0x90 <botones>
		}
	}
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
